// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mocks_repository is a generated GoMock package.
package mocks_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDriverInterface is a mock of DriverInterface interface.
type MockDriverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDriverInterfaceMockRecorder
}

// MockDriverInterfaceMockRecorder is the mock recorder for MockDriverInterface.
type MockDriverInterfaceMockRecorder struct {
	mock *MockDriverInterface
}

// NewMockDriverInterface creates a new mock instance.
func NewMockDriverInterface(ctrl *gomock.Controller) *MockDriverInterface {
	mock := &MockDriverInterface{ctrl: ctrl}
	mock.recorder = &MockDriverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverInterface) EXPECT() *MockDriverInterfaceMockRecorder {
	return m.recorder
}

// Evict mocks base method.
func (m *MockDriverInterface) Evict(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockDriverInterfaceMockRecorder) Evict(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockDriverInterface)(nil).Evict), ctx, key)
}

// Get mocks base method.
func (m *MockDriverInterface) Get(ctx context.Context, key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDriverInterfaceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDriverInterface)(nil).Get), ctx, key)
}

// Upsert mocks base method.
func (m *MockDriverInterface) Upsert(ctx context.Context, key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDriverInterfaceMockRecorder) Upsert(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDriverInterface)(nil).Upsert), ctx, key, data)
}

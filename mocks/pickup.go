// Code generated by MockGen. DO NOT EDIT.
// Source: pickup.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "cosmart-library/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockPickupRepositoryInterface is a mock of PickupRepositoryInterface interface.
type MockPickupRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPickupRepositoryInterfaceMockRecorder
}

// MockPickupRepositoryInterfaceMockRecorder is the mock recorder for MockPickupRepositoryInterface.
type MockPickupRepositoryInterfaceMockRecorder struct {
	mock *MockPickupRepositoryInterface
}

// NewMockPickupRepositoryInterface creates a new mock instance.
func NewMockPickupRepositoryInterface(ctrl *gomock.Controller) *MockPickupRepositoryInterface {
	mock := &MockPickupRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPickupRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupRepositoryInterface) EXPECT() *MockPickupRepositoryInterfaceMockRecorder {
	return m.recorder
}

// EvictIdempotency mocks base method.
func (m *MockPickupRepositoryInterface) EvictIdempotency(ctx context.Context, key string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictIdempotency", ctx, key)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictIdempotency indicates an expected call of EvictIdempotency.
func (mr *MockPickupRepositoryInterfaceMockRecorder) EvictIdempotency(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictIdempotency", reflect.TypeOf((*MockPickupRepositoryInterface)(nil).EvictIdempotency), ctx, key)
}

// GetBookOrder mocks base method.
func (m *MockPickupRepositoryInterface) GetBookOrder(ctx context.Context, key string) (domain.PickupOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookOrder", ctx, key)
	ret0, _ := ret[0].(domain.PickupOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookOrder indicates an expected call of GetBookOrder.
func (mr *MockPickupRepositoryInterfaceMockRecorder) GetBookOrder(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookOrder", reflect.TypeOf((*MockPickupRepositoryInterface)(nil).GetBookOrder), ctx, key)
}

// GetIdempotency mocks base method.
func (m *MockPickupRepositoryInterface) GetIdempotency(ctx context.Context, key string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdempotency", ctx, key)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdempotency indicates an expected call of GetIdempotency.
func (mr *MockPickupRepositoryInterfaceMockRecorder) GetIdempotency(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdempotency", reflect.TypeOf((*MockPickupRepositoryInterface)(nil).GetIdempotency), ctx, key)
}

// StoreIdempotency mocks base method.
func (m *MockPickupRepositoryInterface) StoreIdempotency(ctx context.Context, key string, ttl time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIdempotency", ctx, key, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIdempotency indicates an expected call of StoreIdempotency.
func (mr *MockPickupRepositoryInterfaceMockRecorder) StoreIdempotency(ctx, key, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIdempotency", reflect.TypeOf((*MockPickupRepositoryInterface)(nil).StoreIdempotency), ctx, key, ttl)
}

// UpsertBookOrder mocks base method.
func (m *MockPickupRepositoryInterface) UpsertBookOrder(ctx context.Context, pickup domain.PickupOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBookOrder", ctx, pickup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBookOrder indicates an expected call of UpsertBookOrder.
func (mr *MockPickupRepositoryInterfaceMockRecorder) UpsertBookOrder(ctx, pickup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBookOrder", reflect.TypeOf((*MockPickupRepositoryInterface)(nil).UpsertBookOrder), ctx, pickup)
}

// MockPickupUsecaseInterface is a mock of PickupUsecaseInterface interface.
type MockPickupUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPickupUsecaseInterfaceMockRecorder
}

// MockPickupUsecaseInterfaceMockRecorder is the mock recorder for MockPickupUsecaseInterface.
type MockPickupUsecaseInterfaceMockRecorder struct {
	mock *MockPickupUsecaseInterface
}

// NewMockPickupUsecaseInterface creates a new mock instance.
func NewMockPickupUsecaseInterface(ctrl *gomock.Controller) *MockPickupUsecaseInterface {
	mock := &MockPickupUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockPickupUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPickupUsecaseInterface) EXPECT() *MockPickupUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetBookOrder mocks base method.
func (m *MockPickupUsecaseInterface) GetBookOrder(ctx context.Context, key string) (domain.PickupOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookOrder", ctx, key)
	ret0, _ := ret[0].(domain.PickupOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookOrder indicates an expected call of GetBookOrder.
func (mr *MockPickupUsecaseInterfaceMockRecorder) GetBookOrder(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookOrder", reflect.TypeOf((*MockPickupUsecaseInterface)(nil).GetBookOrder), ctx, key)
}

// MakeBookOrder mocks base method.
func (m *MockPickupUsecaseInterface) MakeBookOrder(ctx context.Context, pickup domain.PickupOrder) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBookOrder", ctx, pickup)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBookOrder indicates an expected call of MakeBookOrder.
func (mr *MockPickupUsecaseInterfaceMockRecorder) MakeBookOrder(ctx, pickup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBookOrder", reflect.TypeOf((*MockPickupUsecaseInterface)(nil).MakeBookOrder), ctx, pickup)
}

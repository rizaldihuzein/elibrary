// Code generated by MockGen. DO NOT EDIT.
// Source: library.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "cosmart-library/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLibraryRepositoryInterface is a mock of LibraryRepositoryInterface interface.
type MockLibraryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryRepositoryInterfaceMockRecorder
}

// MockLibraryRepositoryInterfaceMockRecorder is the mock recorder for MockLibraryRepositoryInterface.
type MockLibraryRepositoryInterfaceMockRecorder struct {
	mock *MockLibraryRepositoryInterface
}

// NewMockLibraryRepositoryInterface creates a new mock instance.
func NewMockLibraryRepositoryInterface(ctrl *gomock.Controller) *MockLibraryRepositoryInterface {
	mock := &MockLibraryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLibraryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryRepositoryInterface) EXPECT() *MockLibraryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FetchRawBooksBySubject mocks base method.
func (m *MockLibraryRepositoryInterface) FetchRawBooksBySubject(ctx context.Context, subject string) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRawBooksBySubject", ctx, subject)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRawBooksBySubject indicates an expected call of FetchRawBooksBySubject.
func (mr *MockLibraryRepositoryInterfaceMockRecorder) FetchRawBooksBySubject(ctx, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRawBooksBySubject", reflect.TypeOf((*MockLibraryRepositoryInterface)(nil).FetchRawBooksBySubject), ctx, subject)
}

// MockLibraryUsecaseInterface is a mock of LibraryUsecaseInterface interface.
type MockLibraryUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLibraryUsecaseInterfaceMockRecorder
}

// MockLibraryUsecaseInterfaceMockRecorder is the mock recorder for MockLibraryUsecaseInterface.
type MockLibraryUsecaseInterfaceMockRecorder struct {
	mock *MockLibraryUsecaseInterface
}

// NewMockLibraryUsecaseInterface creates a new mock instance.
func NewMockLibraryUsecaseInterface(ctrl *gomock.Controller) *MockLibraryUsecaseInterface {
	mock := &MockLibraryUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockLibraryUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibraryUsecaseInterface) EXPECT() *MockLibraryUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GetBookList mocks base method.
func (m *MockLibraryUsecaseInterface) GetBookList(ctx context.Context, request domain.GetBookListRequest) (domain.GetBookListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookList", ctx, request)
	ret0, _ := ret[0].(domain.GetBookListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookList indicates an expected call of GetBookList.
func (mr *MockLibraryUsecaseInterfaceMockRecorder) GetBookList(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookList", reflect.TypeOf((*MockLibraryUsecaseInterface)(nil).GetBookList), ctx, request)
}
